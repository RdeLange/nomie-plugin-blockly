import { RequestHandler0, RequestHandler } from 'vscode-jsonrpc';
import { TextDocumentIdentifier, Diagnostic } from 'vscode-languageserver-types';
import { ProtocolRequestType0, ProtocolRequestType } from './messages';
import { PartialResultParams, StaticRegistrationOptions, WorkDoneProgressParams, TextDocumentRegistrationOptions, WorkDoneProgressOptions, TextDocumentClientCapabilities } from './protocol';
/**
 * @since 3.17.0 - proposed state
 */
export interface DiagnosticClientCapabilities {
    /**
     * Whether implementation supports dynamic registration. If this is set to `true`
     * the client supports the new `(TextDocumentRegistrationOptions & StaticRegistrationOptions)`
     * return value for the corresponding server capability as well.
     */
    dynamicRegistration?: boolean;
}
export interface $DiagnosticClientCapabilities {
    textDocument?: TextDocumentClientCapabilities & {
        diagnostic: DiagnosticClientCapabilities;
    };
}
/**
 * @since 3.17.0 - proposed state
 */
export declare namespace DiagnosticPullModeFlags {
    /**
     * Trigger the diagnostic pull on open only.
     */
    const onOpen: 1;
    /**
     * Trigger the diagnostic pull on type only
     */
    const onType: 2;
    /**
     * Trigger the diagnostic pull on save only
     */
    const onSave: 4;
    /**
     * Trigger the diagnostic pull on open, type and save.
     */
    const all: number;
    function is(value: any): value is DiagnosticPullModeFlags;
    function isOpen(value: number): boolean;
    function isType(value: number): boolean;
    function isSave(value: number): boolean;
}
export declare type DiagnosticPullModeFlags = number;
/**
 * @since 3.17.0 - proposed state
 */
export declare namespace DiagnosticTriggerKind {
    /**
     * The request got triggered through some API
     */
    const Invoked: 1;
    /**
     * The request got triggered because the user opened a document.
     */
    const Opened: 2;
    /**
     * The request got triggered because the user typed in a document.
     */
    const Typed: 3;
    /**
     * The request got triggered because the user saved a document.
     */
    const Saved: 4;
    function is(value: any): value is DiagnosticTriggerKind;
}
export declare type DiagnosticTriggerKind = 1 | 2 | 3 | 4;
/**
 * @since 3.17.0 - proposed state
 */
export interface DiagnosticContext {
    triggerKind: DiagnosticTriggerKind;
}
/**
 * @since 3.17.0 - proposed state
 */
export interface DiagnosticParams extends WorkDoneProgressParams, PartialResultParams {
    /**
     * The text document.
     */
    textDocument: TextDocumentIdentifier;
    /**
     * Additional context information.
     */
    context: DiagnosticContext;
}
/**
 * @since 3.17.0 - proposed state
 */
export interface DiagnosticOptions extends WorkDoneProgressOptions {
    /**
     * An optional identifier under which the diagnostics are
     * managed by the client.
     */
    identifier?: string;
    /**
     * An optional mode indicating when the client should
     * pull. Defaults to `onOpen & onType`.
     */
    mode?: DiagnosticPullModeFlags;
}
/**
 * @since 3.17.0 - proposed state
 */
export interface DiagnosticRegistrationOptions extends TextDocumentRegistrationOptions, DiagnosticOptions, StaticRegistrationOptions {
}
export interface $DiagnosticServerCapabilities {
    diagnosticProvider?: boolean | DiagnosticOptions;
}
/**
 * @since 3.17.0 - proposed state
 */
export interface DiagnosticServerCancellationData {
    retriggerRequest: boolean;
}
/**
 * @since 3.17.0 - proposed state
 */
export declare namespace DiagnosticServerCancellationData {
    function is(value: any): value is DiagnosticServerCancellationData;
}
/**
 * The result of a diagnostic pull request.
 *
 * @since 3.17.0 - proposed state
 */
export interface DiagnosticList {
    items: Diagnostic[];
}
/**
 * @since 3.17.0 - proposed state
 */
export declare namespace DiagnosticRequest {
    const method: 'textDocument/diagnostic';
    const type: ProtocolRequestType<DiagnosticParams, DiagnosticList, Diagnostic[], DiagnosticServerCancellationData, DiagnosticRegistrationOptions>;
    type HandlerSignature = RequestHandler<DiagnosticParams, DiagnosticList | null, void>;
}
/**
 * @since 3.17.0 - proposed state
 */
export declare namespace DiagnosticRefreshRequest {
    const method: `workspace/diagnostic/refresh`;
    const type: ProtocolRequestType0<void, void, void, void>;
    type HandlerSignature = RequestHandler0<void, void>;
}
