"use strict";
/* --------------------------------------------------------------------------------------------
 * Copyright (c) TypeFox and others. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 * ------------------------------------------------------------------------------------------ */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagnosticRefreshRequest = exports.DiagnosticRequest = exports.DiagnosticServerCancellationData = exports.DiagnosticTriggerKind = exports.DiagnosticPullModeFlags = void 0;
const Is = require("./utils/is");
const messages_1 = require("./messages");
/**
 * @since 3.17.0 - proposed state
 */
var DiagnosticPullModeFlags;
(function (DiagnosticPullModeFlags) {
    /**
     * Trigger the diagnostic pull on open only.
     */
    DiagnosticPullModeFlags.onOpen = 1;
    /**
     * Trigger the diagnostic pull on type only
     */
    DiagnosticPullModeFlags.onType = 2;
    /**
     * Trigger the diagnostic pull on save only
     */
    DiagnosticPullModeFlags.onSave = 4;
    /**
     * Trigger the diagnostic pull on open, type and save.
     */
    DiagnosticPullModeFlags.all = DiagnosticPullModeFlags.onOpen | DiagnosticPullModeFlags.onType | DiagnosticPullModeFlags.onSave;
    function is(value) {
        return DiagnosticPullModeFlags.onType <= value && value <= DiagnosticPullModeFlags.all;
    }
    DiagnosticPullModeFlags.is = is;
    function isOpen(value) {
        return (value & DiagnosticPullModeFlags.onOpen) !== 0;
    }
    DiagnosticPullModeFlags.isOpen = isOpen;
    function isType(value) {
        return (value & DiagnosticPullModeFlags.onType) !== 0;
    }
    DiagnosticPullModeFlags.isType = isType;
    function isSave(value) {
        return (value & DiagnosticPullModeFlags.onSave) !== 0;
    }
    DiagnosticPullModeFlags.isSave = isSave;
})(DiagnosticPullModeFlags = exports.DiagnosticPullModeFlags || (exports.DiagnosticPullModeFlags = {}));
/**
 * @since 3.17.0 - proposed state
 */
var DiagnosticTriggerKind;
(function (DiagnosticTriggerKind) {
    /**
     * The request got triggered through some API
     */
    DiagnosticTriggerKind.Invoked = 1;
    /**
     * The request got triggered because the user opened a document.
     */
    DiagnosticTriggerKind.Opened = 2;
    /**
     * The request got triggered because the user typed in a document.
     */
    DiagnosticTriggerKind.Typed = 3;
    /**
     * The request got triggered because the user saved a document.
     */
    DiagnosticTriggerKind.Saved = 4;
    function is(value) {
        return DiagnosticTriggerKind.Invoked <= value && value <= DiagnosticTriggerKind.Saved;
    }
    DiagnosticTriggerKind.is = is;
})(DiagnosticTriggerKind = exports.DiagnosticTriggerKind || (exports.DiagnosticTriggerKind = {}));
/**
 * @since 3.17.0 - proposed state
 */
var DiagnosticServerCancellationData;
(function (DiagnosticServerCancellationData) {
    function is(value) {
        const candidate = value;
        return candidate && Is.boolean(candidate.retriggerRequest);
    }
    DiagnosticServerCancellationData.is = is;
})(DiagnosticServerCancellationData = exports.DiagnosticServerCancellationData || (exports.DiagnosticServerCancellationData = {}));
/**
 * @since 3.17.0 - proposed state
 */
var DiagnosticRequest;
(function (DiagnosticRequest) {
    DiagnosticRequest.method = 'textDocument/diagnostic';
    DiagnosticRequest.type = new messages_1.ProtocolRequestType(DiagnosticRequest.method);
})(DiagnosticRequest = exports.DiagnosticRequest || (exports.DiagnosticRequest = {}));
/**
 * @since 3.17.0 - proposed state
 */
var DiagnosticRefreshRequest;
(function (DiagnosticRefreshRequest) {
    DiagnosticRefreshRequest.method = `workspace/diagnostic/refresh`;
    DiagnosticRefreshRequest.type = new messages_1.ProtocolRequestType0(DiagnosticRefreshRequest.method);
})(DiagnosticRefreshRequest = exports.DiagnosticRefreshRequest || (exports.DiagnosticRefreshRequest = {}));
//# sourceMappingURL=proposed.diagnostic.js.map